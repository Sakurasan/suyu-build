name: Weekly Suyu Build (macOS)

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs at 00:00 every Sunday
  watch: 
    types: [started]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 120  # Set timeout to 2 hours

    env:
      # Support both Intel and Apple Silicon Macs
      HOMEBREW_PREFIX: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew' || '/usr/local' }}
      Qt5_DIR: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew/opt/qt@5/lib/cmake' || '/usr/local/opt/qt@5/lib/cmake' }}
      LIBVULKAN_PATH: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew/lib/libvulkan.dylib' || '/usr/local/lib/libvulkan.dylib' }}
      LLVM_DIR: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew/opt/llvm@17' || '/usr/local/opt/llvm@17' }}
      FFMPEG_DIR: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew/opt/ffmpeg' || '/usr/local/opt/ffmpeg' }}
      VULKAN_SDK: ${{ startsWith(runner.arch, 'ARM64') && '/opt/homebrew/opt/vulkan-headers' || '/usr/local/opt/vulkan-headers' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: 'suyu-dev/suyu'
          submodules: recursive
          ref: dev  # Explicitly checkout dev branch

      - name: Install Homebrew Dependencies
        run: |
          brew update
          brew install \
            autoconf automake boost ccache ffmpeg fmt glslang hidapi \
            libtool libusb lz4 ninja nlohmann-json openssl pkg-config \
            qt@5 sdl2 speexdsp zlib zstd cmake Catch2 molten-vk \
            vulkan-headers vulkan-loader dylibbundler create-dmg

      - name: Setup Ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Prepare Build Environment
        run: |
          mkdir -p build
          ccache -z  # Zero ccache statistics

      - name: Configure CMake
        working-directory: build
        run: |
          cmake .. -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSUYU_USE_BUNDLED_VCPKG=OFF \
            -DSUYU_TESTS=OFF \
            -DENABLE_WEB_SERVICE=OFF \
            -DENABLE_LIBUSB=OFF \
            -DSDL_ARMNEON=ON \
            -DENABLE_QT6=OFF \
            -DENABLE_QT_TRANSLATION=ON \
            -DSUYU_USE_EXTERNAL_VULKAN_HEADERS=ON \
            -DCLANG_FORMAT=ON \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
            -DVULKAN_HEADERS_INSTALL_DIR=$(brew --prefix vulkan-headers) \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build Suyu
        working-directory: build
        run: |
          ninja
          ccache -s  # Print ccache statistics

      - name: Bundle Dependencies
        working-directory: build
        run: |
          dylibbundler -of -cd -b -x bin/suyu.app/Contents/MacOS/suyu -d bin/suyu.app/Contents/libs/

      - name: Copy Qt5 Frameworks
        working-directory: build
        run: |
          QT_LIB_DIR=$(brew --prefix qt@5)/lib
          mkdir -p bin/suyu.app/Contents/Frameworks
          
          # Copy essential Qt5 frameworks
          qt_frameworks=(
            "QtCore"
            "QtGui"
            "QtWidgets"
            "QtNetwork"
            "QtConcurrent"
            "QtPrintSupport"
            "QtSvg"
          )
          
          for framework in "${qt_frameworks[@]}"; do
            cp -R "$QT_LIB_DIR/${framework}.framework" bin/suyu.app/Contents/Frameworks/
          done

      - name: Create DMG
        working-directory: build/bin
        run: |
          create-dmg \
            --volname "Suyu" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "suyu.app" 200 190 \
            --hide-extension "suyu.app" \
            --app-drop-link 600 185 \
            "Suyu-macOS-$(date +'%Y-%m-%d').dmg" \
            "suyu.app"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: suyu-macos-${{ runner.arch }}
          path: build/bin/Suyu-macOS-*.dmg
          retention-days: 7

      - name: Create Release
        if: github.event_name == 'schedule'  # Only create release on scheduled runs
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/Suyu-macOS-*.dmg
          name: "Suyu Weekly Build $(date +'%Y-%m-%d')"
          tag_name: "weekly-$(date +'%Y-%m-%d')"
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}