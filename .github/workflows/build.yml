name: Weekly Suyu Build (macOS)

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs at 00:00 every Sunday
  watch: 
    types: [started]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    strategy:
      matrix:
        runner: [macos-13, macos-14]  # Intel (13) and Apple Silicon (14) runners
        include:
          - runner: macos-13
            homebrew_prefix: /usr/local
            osx_deployment_target: 10.15
            arch: x86_64
          - runner: macos-14
            homebrew_prefix: /opt/homebrew
            osx_deployment_target: 11.0
            arch: arm64

    runs-on: ${{ matrix.runner }}
    timeout-minutes: 120  # Set timeout to 2 hours

    env:
      Qt5_DIR: ${{ matrix.homebrew_prefix }}/opt/qt@5/lib/cmake
      LIBVULKAN_PATH: ${{ matrix.homebrew_prefix }}/lib/libvulkan.dylib
      LLVM_DIR: ${{ matrix.homebrew_prefix }}/opt/llvm@17
      FFMPEG_DIR: ${{ matrix.homebrew_prefix }}/opt/ffmpeg
      VULKAN_SDK: ${{ matrix.homebrew_prefix }}/opt/vulkan-headers
      MACOS_ARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout Repository
        run: |
          git clone --recursive https://git.suyu.dev/suyu/suyu.git .
          git checkout dev

      - name: Install Dependencies
        run: |
          brew update
          brew install \
            autoconf automake boost@1.84 ccache ffmpeg fmt glslang hidapi \
            libtool libusb lz4 ninja nlohmann-json openssl pkg-config \
            qt@5 sdl2 speexdsp zlib zstd cmake Catch2 molten-vk \
            vulkan-headers vulkan-loader

      - name: Prepare Build Environment
        run: |
          mkdir -p build
          cd build

      - name: Configure CMake
        working-directory: build
        run: |
          cmake .. -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSUYU_USE_BUNDLED_VCPKG=OFF \
            -DSUYU_TESTS=OFF \
            -DENABLE_WEB_SERVICE=OFF \
            -DENABLE_LIBUSB=OFF \
            -DSDL_ARMNEON=ON \
            -DENABLE_QT6=OFF \
            -DENABLE_QT_TRANSLATION=ON \
            -DSUYU_USE_EXTERNAL_VULKAN_HEADERS=ON \
            -DCLANG_FORMAT=ON \
            -DCMAKE_OSX_ARCHITECTURES=${{ env.MACOS_ARCH }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.osx_deployment_target }} \
            -DVULKAN_HEADERS_INSTALL_DIR=${{ matrix.homebrew_prefix }}/opt/vulkan-headers \
            -DBOOST_ASIO_ENABLE_OLD_SERVICES

      - name: Build Suyu
        working-directory: build
        run: ninja

      - name: Bundle Dependencies
        working-directory: build
        run: |
          dylibbundler -of -cd -b -x bin/suyu.app/Contents/MacOS/suyu -d bin/suyu.app/Contents/libs/

      - name: Copy Qt5 Frameworks
        working-directory: build
        run: |
          QT_LIB_DIR=${{ matrix.homebrew_prefix }}/opt/qt@5/lib
          mkdir -p bin/suyu.app/Contents/Frameworks
          
          # Copy essential Qt5 frameworks
          qt_frameworks=(
            "QtCore"
            "QtGui"
            "QtWidgets"
            "QtNetwork"
            "QtConcurrent"
            "QtPrintSupport"
            "QtSvg"
          )
          
          for framework in "${qt_frameworks[@]}"; do
            cp -R "$QT_LIB_DIR/${framework}.framework" bin/suyu.app/Contents/Frameworks/
          done

      - name: Create DMG
        working-directory: build/bin
        run: |
          brew install create-dmg
          create-dmg \
            --volname "Suyu (${{ env.MACOS_ARCH }})" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "suyu.app" 200 190 \
            --hide-extension "suyu.app" \
            --app-drop-link 600 185 \
            "Suyu-${{ env.MACOS_ARCH }}.dmg" \
            "suyu.app"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: suyu-macos-${{ env.MACOS_ARCH }}
          path: build/bin/Suyu-${{ env.MACOS_ARCH }}.dmg
          retention-days: 7

  create-universal-release:
    needs: build
    runs-on: macos-latest
    if: github.event_name == 'schedule'  # Only create release on scheduled runs
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Universal Binary and Release
        run: |
          # Create a universal DMG (if possible)
          # Note: This is a simplified approach and may need adjustment
          mkdir -p universal-build
          
          # You might need to use lipo or other tools to create a true universal binary
          # This is a placeholder for actual universal binary creation
          cp artifacts/suyu-macos-x86_64.dmg universal-build/Suyu-universal.dmg

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: universal-build/Suyu-universal.dmg
          name: "Suyu Weekly Build $(date +'%Y-%m-%d')"
          tag_name: "weekly-$(date +'%Y-%m-%d')"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
