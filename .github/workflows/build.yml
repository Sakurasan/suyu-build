name: Weekly Suyu Build (macOS)

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs at 00:00 every Sunday
  watch: 
    types: [started]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 120  # Set timeout to 2 hours

    env:
      Qt5_DIR: /opt/homebrew/opt/qt@5/lib/cmake
      LIBVULKAN_PATH: /opt/homebrew/lib/libvulkan.dylib
      LLVM_DIR: /opt/homebrew/opt/llvm@17
      FFMPEG_DIR: /opt/homebrew/opt/ffmpeg
      VULKAN_SDK: /opt/homebrew/opt/vulkan-headers
      MACOS_ARCH: arm64

    steps:
      - name: Clean workspace
        run: |
          rm -rf ./* ./.[!.]*

      - name: Install CMake
        run: |
          echo ${{ github.event.repository.owner.login }}
          system_profiler SPHardwareDataType
          brew update
          brew install git cmake
          cmake --version

      - name: Checkout Repository
        run: |
          git clone --recursive https://git.suyu.dev/suyu/suyu.git .
          # git checkout dev
          git submodule update --init --recursive

      - name: Install Other Dependencies
        run: |
          brew install \
            autoconf automake boost ccache ffmpeg fmt glslang hidapi \
            libtool libusb lz4 ninja nlohmann-json openssl pkg-config \
            qt@5 sdl2 speexdsp zlib zstd Catch2 \
            molten-vk 
            #vulkan-headers vulkan-loader

      - name: Install Vulkan SDK Components
        run: |
          # Set up version variables
          VULKAN_VERSION="1.3.302"
          INSTALL_DIR="/opt/homebrew/opt/vulkan-sdk"
          
          # Create installation directory
          sudo mkdir -p $INSTALL_DIR
          sudo chown $USER $INSTALL_DIR
          
          # Build and install Vulkan-Headers
          git clone --depth 1 --branch v${VULKAN_VERSION} https://github.com/KhronosGroup/Vulkan-Headers.git
          cd Vulkan-Headers
          cmake -B build -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR
          cmake --build build
          cmake --install build
          cd ..
          
          # Build and install Vulkan-Loader
          git clone --depth 1 --branch v${VULKAN_VERSION} https://github.com/KhronosGroup/Vulkan-Loader.git
          cd Vulkan-Loader
          cmake -B build \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DVULKAN_HEADERS_INSTALL_DIR=$INSTALL_DIR \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --install build
          cd ..
          
          # Set up environment variables
          echo "VULKAN_SDK=$INSTALL_DIR" >> $GITHUB_ENV
          echo "VK_LAYER_PATH=$INSTALL_DIR/share/vulkan/explicit_layer.d" >> $GITHUB_ENV
          echo "VK_ICD_FILENAMES=/opt/homebrew/share/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
          
          # Add to pkg-config path
          echo "PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          
          # Add to library path
          echo "LIBRARY_PATH=$INSTALL_DIR/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$INSTALL_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
  
      - name: Prepare Build Environment
        run: |
          mkdir -p build
          cd build

      - name: Configure CMake
        working-directory: build
        run: |
          # Set specific Vulkan environment variables
          export VULKAN_SDK=/opt/homebrew/opt/vulkan-headers
          export VK_ICD_FILENAMES=/opt/homebrew/share/vulkan/icd.d/MoltenVK_icd.json
          export VK_LAYER_PATH=/opt/homebrew/share/vulkan/explicit_layer.d
          export VULKAN_LOADER_DYNAMIC_LIB_PATH=/opt/homebrew/lib/libvulkan.dylib

          # Configure CMake with Ninja
          cmake .. -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSUYU_USE_BUNDLED_VCPKG=OFF \
            -DSUYU_TESTS=OFF \
            -DENABLE_WEB_SERVICE=OFF \
            -DENABLE_LIBUSB=OFF \
            -DSDL_ARMNEON=ON \
            -DENABLE_QT6=OFF \
            -DENABLE_QT_TRANSLATION=ON \
            -DSUYU_USE_EXTERNAL_VULKAN_HEADERS=OFF \
            -DCLANG_FORMAT=ON \
            -DCMAKE_OSX_ARCHITECTURES=${{ env.MACOS_ARCH }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
            -DVULKAN_HEADERS_INSTALL_DIR=/opt/homebrew/opt/vulkan-headers 

      - name: Build Suyu
        working-directory: build
        run: ninja

      - name: Bundle Dependencies
        working-directory: build
        run: |
          dylibbundler -of -cd -b -x bin/suyu.app/Contents/MacOS/suyu -d bin/suyu.app/Contents/libs/

      - name: Copy Qt5 Frameworks
        working-directory: build
        run: |
          QT_LIB_DIR=/opt/homebrew/opt/qt@5/lib
          mkdir -p bin/suyu.app/Contents/Frameworks
          
          # Copy essential Qt5 frameworks
          qt_frameworks=(
            "QtCore"
            "QtGui"
            "QtWidgets"
            "QtNetwork"
            "QtConcurrent"
            "QtPrintSupport"
            "QtSvg"
          )
          
          for framework in "${qt_frameworks[@]}"; do
            cp -R "$QT_LIB_DIR/${framework}.framework" bin/suyu.app/Contents/Frameworks/
          done

      - name: Create DMG
        working-directory: build/bin
        run: |
          brew install create-dmg
          create-dmg \
            --volname "Suyu (arm64)" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "suyu.app" 200 190 \
            --hide-extension "suyu.app" \
            --app-drop-link 600 185 \
            "Suyu-arm64.dmg" \
            "suyu.app"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: suyu-macos-arm64
          path: build/bin/Suyu-arm64.dmg
          retention-days: 7

      - name: Create Release
        if: github.event_name == 'schedule'  # Only create release on scheduled runs
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/Suyu-arm64.dmg
          name: "Suyu Weekly Build $(date +'%Y-%m-%d')"
          tag_name: "weekly-$(date +'%Y-%m-%d')"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}